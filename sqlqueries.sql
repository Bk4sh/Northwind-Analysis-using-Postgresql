select * from categories;
select * from customers;
select * from employees;
select * from order_details;
select * from orders;
select * from products;
select * from shippers;
select * from suppliers;

-- Total Sales by Year
SELECT
	DATE_PART('year', orders.orderdate) AS Year, 
	SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM orders
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY Year
ORDER BY Year;

-- Total Sales by Month
SELECT
	DATE_PART('year', orders.orderdate) AS Year,
	DATE_PART('month', orders.orderdate) AS Month,
	SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM orders
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY Year, Month
ORDER BY Year, Month;

-- Total Sales by Quarter
SELECT
	DATE_PART('year', orders.orderdate) AS Year,
	DATE_PART('quarter', orders.orderdate) AS Quarter,
	SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM orders
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY Year, Quarter
ORDER BY Year, Quarter;

-- Total Sales by Region or Country
SELECT
	orders.shipcountry AS Country,
    SUM(order_details.Quantity * order_details.UnitPrice) AS TotalSales
FROM orders
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY Country
ORDER BY TotalSales DESC;

-- Total Sales by Product Category
SELECT
	categories.categoryname AS Category,
    SUM(order_details.quantity * order_details.unitPrice) AS TotalSales
FROM order_details
JOIN products ON order_details.productid = products.productid
JOIN categories ON products.categoryid = categories.categoryid
JOIN orders ON order_details.orderid = orders.orderid
GROUP BY Category
ORDER BY TotalSales DESC;

-- Number of orders per customer
SELECT
	customers.customerid AS CustomerID,
    COUNT(orders.orderid) AS NumberOfOrders
FROM customers
LEFT JOIN orders ON customers.customerid = orders.customerid
GROUP BY customers.customerid
ORDER BY NumberOfOrders DESC;

-- Total Revenue Generated by Each Customer
SELECT
	customers.customerid AS CustomerID,
	customers.contactname,
    SUM(order_details.quantity * order_details.unitprice) AS TotalRevenue
FROM customers
JOIN orders ON customers.customerid = orders.customerid
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY customers.customerid, customers.contactname
ORDER BY TotalRevenue DESC;

-- Frequency of Orders by Customer
SELECT 
	customers.customerid AS CustomerID,
    COUNT(orders.orderid) AS OrderFrequency
FROM customers
JOIN orders ON customers.customerid = orders.customerid
GROUP BY customers.customerid
ORDER BY OrderFrequency DESC;

-- Total sales generated by each employee
SELECT
	employees.employee_id AS EmployeeID,
	employees.first_name as First_name,
	employees.last_name as Last_Name,
    SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM employees
JOIN orders ON employees.employee_id = orders.employeeid
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY employees.employee_id, employees.first_name, employees.last_name
ORDER BY TotalSales DESC;

-- Number of Orders Handled by Each Employee
SELECT
	employees.employee_id AS EmployeeID,
	employees.first_name as First_name,
	employees.last_name as Last_Name,
    COUNT(orders.orderid) AS NumberOfOrders
FROM employees
JOIN orders ON employees.employee_id = orders.employeeid
GROUP BY employees.employee_id, employees.first_name, employees.last_name
ORDER BY NumberOfOrders DESC;

-- Employee Performance Over Time
SELECT 
	employees.employee_id AS EmployeeID,
	employees.first_name as First_name,
	employees.last_name as Last_Name,
    DATE_PART('year', orders.orderdate) AS Year,
    DATE_PART('month', orders.orderdate) AS Month,
    SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM employees
JOIN orders ON employees.employee_id = orders.employeeid
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY employees.employee_id, employees.first_name, employees.last_name, Year, Month
ORDER BY Year, Month, EmployeeID;

-- Total Sales by Product
SELECT
	products.productid,
    products.productname,
    SUM(order_details.quantity * order_details.unitprice) AS TotalSales
FROM products
JOIN order_details ON products.productid = order_details.productid
GROUP BY products.productid, products.productname
ORDER BY TotalSales DESC;

-- Number of Orders for Each Product
SELECT 
	products.productid,
    products.productname,
    COUNT(order_details.orderid) AS NumberOfOrders
FROM products
JOIN order_details ON products.productid = order_details.productid
GROUP BY products.productid, products.productname
ORDER BY NumberOfOrders DESC;

-- Average Order Value
SELECT round(AVG(OrderValue), 2) AS AverageOrderValue
FROM (
    SELECT orders.orderid,
           SUM(order_details.quantity * order_details.unitprice) AS OrderValue
    FROM orders
    JOIN order_details ON orders.orderid = order_details.orderid
    GROUP BY orders.orderid
) AS OrderValues;

-- Total Orders per Year and Month
SELECT 
    DATE_PART('year', orders.orderdate) AS Year,
    DATE_PART('month', orders.orderdate) AS Month,
    COUNT(orders.orderid) AS TotalOrders
FROM orders
GROUP BY ROLLUP (Year, Month)
ORDER BY Year, Month;

-- Number of Items per Order
SELECT 
	orders.orderid,
    SUM(order_details.quantity) AS TotalItems
FROM orders
JOIN order_details ON orders.orderid = order_details.orderid
GROUP BY orders.orderid
ORDER BY TotalItems DESC;

-- Most Common Shipping Destinations
SELECT 
	shipcountry,
    COUNT(orderid) AS NumberOfOrders
FROM orders
GROUP BY shipcountry
ORDER BY NumberOfOrders DESC;

-- Orders Shipped by Different Shipping Companies
SELECT 
	shipperid AS ShippingCompanyID,
	companyname,
    COUNT(orderid) AS NumberOfOrders
FROM orders
join shippers on orders.shipvia = shippers.shipperid
GROUP BY shipperid, companyname
ORDER BY NumberOfOrders DESC;


-- Segment Customers by Total Spend
WITH CustomerSpend AS (
    SELECT 
		c.customerid,
        c.companyname,
        SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSpend
    FROM customers AS c
    JOIN orders AS o ON c.customerid = o.customerid
    JOIN order_details AS od ON o.orderID = od.orderid
    GROUP BY c.customerid, c.companyname
),
SpendingThreshold AS (
    SELECT PERCENTILE_CONT(0.8) WITHIN GROUP (ORDER BY TotalSpend) AS Threshold		-- Calculate the 80th percentile spending threshold
    FROM CustomerSpend
)
SELECT 
	cs.customerid,
    cs.companyname,
    cs.TotalSpend,
    CASE 
    	WHEN cs.TotalSpend >= st.Threshold THEN 'High-Value'
    	ELSE 'Low-Value'
    END AS CustomerSegment
FROM CustomerSpend cs, SpendingThreshold st
ORDER BY cs.TotalSpend DESC;

-- Identify Frequent vs. Infrequent Buyers
SELECT 
	c.customerid,
    c.companyname,
    COUNT(o.orderid) AS TotalOrders,
    CASE 
    	WHEN COUNT(o.OrderID) >= 10 THEN 'Frequent Buyer'  -- Adjust threshold as needed
        ELSE 'Infrequent Buyer'
   	END AS BuyerType
FROM customers AS c
JOIN orders AS o ON c.customerid = o.customerid
GROUP BY c.customerid, c.companyname
ORDER BY TotalOrders DESC;

-- Month-Over-Month Sales Growth
WITH MonthlySales AS (
    SELECT 
		DATE_TRUNC('month', o.orderdate) AS SalesMonth,
        SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
    FROM orders AS o
    JOIN order_details AS od ON o.orderid = od.orderid
    GROUP BY SalesMonth
)
SELECT 
	SalesMonth,
    TotalSales,
    LAG(TotalSales) OVER (ORDER BY SalesMonth) AS PreviousMonthSales,
    ROUND((TotalSales - LAG(TotalSales) OVER (ORDER BY SalesMonth)) / NULLIF(LAG(TotalSales) OVER (ORDER BY SalesMonth), 0) * 100, 2) AS MonthOverMonthGrowth
FROM MonthlySales
ORDER BY SalesMonth;

-- Year-Over-Year Sales Growth
WITH YearlySales AS (
    SELECT 
		DATE_TRUNC('year', o.orderdate) AS SalesYear,
        SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
    FROM orders AS o
    JOIN order_details AS od ON o.orderid = od.orderid
    GROUP BY SalesYear
)
SELECT 
	SalesYear,
    TotalSales,
    LAG(TotalSales) OVER (ORDER BY SalesYear) AS PreviousYearSales,
    ROUND((TotalSales - LAG(TotalSales) OVER (ORDER BY SalesYear)) / NULLIF(LAG(TotalSales) OVER (ORDER BY SalesYear), 0) * 100, 2) AS YearOverYearGrowth
FROM YearlySales
ORDER BY SalesYear;

-- Seasonal Sales Patterns (Total Sales by Month)
SELECT 
	DATE_TRUNC('month', o.orderdate) AS SalesMonth,
    SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
FROM orders AS o
JOIN order_details AS od ON o.orderid = od.orderid
GROUP BY SalesMonth
ORDER BY SalesMonth;

-- Seasonal Sales Patterns (Total Sales by Quarter)
SELECT 
	DATE_TRUNC('quarter', o.orderdate) AS SalesQuarter,
    SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
FROM orders AS o
JOIN order_details AS od ON o.orderid = od.orderid
GROUP BY SalesQuarter
ORDER BY SalesQuarter;

-- AVG spend per visit
SELECT 
	c.customerid,
    c.companyname AS CustomerName,
    SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSpend,
    COUNT(DISTINCT o.orderid) AS PurchaseFrequency,
    ROUND(SUM(od.unitprice * od.quantity * (1 - od.discount))::numeric / NULLIF(COUNT(DISTINCT o.orderid), 0), 2) AS AvgSpendPerVisit
FROM customers AS c
JOIN orders AS o ON c.customerid = o.customerid
JOIN order_details AS od ON o.orderid = od.orderid
GROUP BY c.customerid, CustomerName
ORDER BY AvgSpendPerVisit DESC;

-- Sales by Supplier
SELECT 
	s.supplierid,
    s.CompanyName AS SupplierName,
    SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
FROM suppliers AS s
JOIN products AS p ON s.supplierid = p.supplierid
JOIN order_details AS od ON p.productid = od.productid
JOIN orders AS o ON od.orderid = o.orderid
GROUP BY s.supplierid, SupplierName
ORDER BY TotalSales DESC;

-- Top Products from Each Supplier
SELECT 
	s.supplierid,
    s.companyname AS SupplierName,
    p.productid,
    p.productName,
    SUM(od.unitprice * od.quantity * (1 - od.discount)) AS TotalSales
FROM suppliers AS s
JOIN products AS p ON s.supplierid = p.supplierid
JOIN order_details AS od ON p.productid = od.productid
JOIN orders AS o ON od.orderid = o.orderid
GROUP BY s.supplierid, SupplierName, p.productid, p.productname
ORDER BY s.supplierid, TotalSales DESC;

